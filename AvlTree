#pragma once

template <class T>
class AvlTree
{
private:
	enum Direction {Left, Right};
	struct Node
	{
		Node* left;
		Node* right;
		Node* parent;
		T data;
		Node(const T& dat) : left(nullptr),right(nullptr),parent(nullptr), data(dat){}
		~Node()
		{
			if (left) delete left;
			if (right) delete right;
			left = right = nullptr;
		}
		Node* minimum()
		{
			Node* curr = this;
			while (curr->left != nullptr)
			{
				curr = curr->left;
			}
			return curr;
		}
		Node* maximum()
		{
			Node* curr = this;
			while (curr->right != nullptr)
			{
				curr = curr->right;
			}
			return curr;
		}
		Node* next()
		{
			if (right != nullptr) return right;
			Node* curr = this;
			Node* pCurr = parent;
			while (pCurr != nullptr) 
			{
				if (curr == pCurr->left) break;
				curr = pCurr;
				pCurr = pCurr->parent;
			}
			return pCurr;
		}
		Node* prev()
		{
			if (left != nullptr) return left;
			Node* curr = this;
			Node* pCurr = parent;
			while (pCurr != nullptr)
			{
				if (pCurr->right == curr) break;
				curr = pCurr;
				pCurr = pCurr->parent;
			}
			return pCurr;
		}
		size_t height() const
		{
			size_t l_h = (left == nullptr) ? 0 : left->height();
			size_t r_h = (right == nullptr) ? 0 : right->height();
			return l_h < r_h ? r_h + 1 : l_h + 1;
		}

		signed char balance() const
		{
			size_t l_h = (left == nullptr) ? 0 : left->height();
			size_t r_h = (right == nullptr) ? 0 : right->height();
			return r_h - l_h;
		}
	};
	size_t _size;
	Node* _root;
	Node* rotate(Node* sub_root, Direction dir)
	{
		Node* child;
		if (dir == Direction::Right)
		{
			child = sub_root->left;
			sub_root->left = child->right;
			if (child->right != nullptr)
			{
				child->right->parent = sub_root;
			}
			child->right = sub_root;
		}
		else
		{
			child = sub_root->right;
			sub_root->right = child->left;
			if (child->left != nullptr)
			{
				child->left->parent = sub_root;
			}
			child->left = sub_root;
		}
		if (sub_root->parent != nullptr)
		{
			if (sub_root->parent->left == sub_root)
			{
				sub_root->parent->left = child;
			}
			else
			{
				sub_root->parent->right = child;
			}
		}
		Node* tmp = sub_root->parent;
		sub_root->parent = child;
		child->parent = tmp;
		return child;
	}
	void rebalance(Node* sub_root)
	{
		do
		{
			switch (sub_root->balance())
			{
			case -2:
			{
				if (sub_root->left->balance() == 1)
					rotate(sub_root->left, Direction::Left);
				sub_root = rotate(sub_root, Direction::Right);
				break;
			}
			case 2:
				{
				if (sub_root->right->balance() == -1)	
					rotate(sub_root->right, Direction::Right);
				sub_root = rotate(sub_root, Direction::Left);
				break;
				}
			}
			if (sub_root->parent == nullptr)
			{
				_root = sub_root;
				
			}
			sub_root = sub_root->parent;
		} while (sub_root != nullptr && sub_root->balance() != 0);
	}
	
public:
	AvlTree() : _size(0), _root(nullptr) {}
	void clear()
	{
		if (_root != nullptr)
		{
			delete _root;
		}
		_root = nullptr;
		_size = 0;
	}
	~AvlTree()
	{
		clear();
	}
	bool empty() const
	{
		return _size == 0 ? true : false;
	}
	size_t size() const
	{
		return _size;
	}
	size_t capacity() const
	{
		return -1;
	}
	void push_back(const T& val)
	{
		++_size;
		if (_root == nullptr)
		{
			_root = new Node(val);
			return;
		}
		
		
			Node* curr = _root;
			Node* pCurr;
			do
			{
				pCurr = curr;
				curr = (curr->data < val) ? curr->right : curr->left;
			} while (curr != nullptr);
			curr = new Node(val);
			curr->parent = pCurr;
			val < pCurr->data ? pCurr->left = curr : pCurr->right = curr;
		
		rebalance(curr->parent);
	}
	size_t height() const
	{
		return _root->height();
	}
	class iterator
	{
	private: Node* _curr;
	public:
		iterator(Node* curr = nullptr) : _curr(curr){}
		T& operator*() const { return _curr->data; }
		bool operator==(const iterator& it) const { return _curr == it._curr; }
		bool operator!=(const iterator& it) const { return !(*this == it); }
		iterator& operator++()
		{
			if (_curr == nullptr) throw "iterator out of bounds";
			_curr = _curr->next();
			return *this;
		}
		iterator operator++(int)
		{
			if (_curr == nullptr) throw "iterator out of bounds";
			Node* curr = _curr;
			_curr = _curr->next();
			return iterator(curr);
		}
		iterator operator+(int n)
		{
			for (int i = 0; i < n; ++i)
			{
				_curr = _curr->next();
			}
			return iterator(_curr);
		}
		iterator& operator--()
		{
			if (_curr == nullptr) throw "iterator out of bounds";
			_curr = _curr->prev();
			return *this;
		}
		iterator operator--(int)
		{
			if (_curr == nullptr) throw "iterator out of bounds";
			Node* curr = _curr;
			_curr = _curr->prev();
			return iterator(curr);
		}
		iterator operator-(int n)
		{
			for (int i = 0; i < n; ++i)
			{
				_curr = _curr->prev();
			}
			return iterator(_curr);
		}
		friend class AvlTree;
	};
	iterator begin() const { return iterator(_root->minimum()); }
	iterator end() const { return iterator(nullptr); }
	iterator find(const T& val)
	{
		for (auto it = begin(); it != end(); ++it)
		{
			if (*it == val)
				return it;
		}
		return end();
	}
	iterator erase(iterator it)
	{
		--_size;
		Node* curr = _root->minimum();
		auto iter = begin();
		while (iter++ != it)
		{
			curr = curr->next();
		}
		if (curr == _root)
		{
			if (_root->right == nullptr)
			{
				_root->left->parent = nullptr;
				_root = _root->left;
				return iterator(_root);
			}
			if (_root->left == nullptr)
			{
				_root->right->parent = nullptr;
				_root = _root->right;
				return iterator(_root);
			}
			Node* connect = _root->right->minimum();
			connect->left = _root->left;
			_root->left->parent = connect;
			_root = _root->right;
			return iterator(_root);
		}
		if (it == begin())
		{
			Node* curr = _root->minimum();
			curr->parent->left = nullptr;
			curr->parent = nullptr;
			return begin();
		}
		if (it == end())
		{
			Node* curr = _root->maximum();
			curr->parent->right = nullptr;
			curr->parent = nullptr;
			return end();
		}

		if (curr->left == nullptr && curr->right == nullptr)
		{
			curr->parent->right == curr ? curr->parent->right = nullptr : curr->parent->left = nullptr;
			curr->parent = nullptr;
			return iterator(curr);
		}
		if (curr->left == nullptr && curr->right != nullptr)
		{
			Node* connect = curr->parent;
			curr->right->parent = connect;
			connect->right == curr ? connect->right = curr->right : connect->left = curr->right;
			rebalance(connect->parent);
			return iterator(connect);
		}
		if (curr->left != nullptr && curr->right == nullptr)
		{
			Node* connect = curr->parent;
			curr->left->parent = connect;
			connect->left == curr ? connect->left = curr->left : connect->right = curr->left;
			rebalance(connect->parent);
			return iterator(connect);
		}
		Node* connect_l = curr->left;
		Node* connect_r = curr->right;
		Node* conn_r_min = connect_r->minimum();
		conn_r_min->left = connect_l;
		connect_l->parent = conn_r_min;
		if (curr->parent->right == curr)
		{
			curr->parent->right = connect_r;
			connect_r->parent = curr->parent;
			rebalance(connect_r);
			return iterator(connect_r->parent);
		}
		else
		{
			curr->parent->left = connect_r;
			connect_r->parent = curr->parent;
			rebalance(connect_r);
			return iterator(connect_r);
		}
	}
};
